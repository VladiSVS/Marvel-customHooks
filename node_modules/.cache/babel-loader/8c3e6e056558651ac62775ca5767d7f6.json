{"ast":null,"code":"var _jsxFileName = \"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/CharList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/useMarvelService';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest();\n  }, []);\n\n  const onRequest = offset => {\n    setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]);\n    setLoading(loading => false);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  };\n\n  const onError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n    setError(true);\n    setLoading(loading => false);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n    // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n    // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n    // в отдельный компонент. Но кода будет больше, появится новое состояние\n    // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n    // По возможности, не злоупотребляйте рефами, только в крайних случаях\n    itemRefs.current.forEach(elt => elt.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.toggle('char__item_selected');\n    itemRefs.current[id].focus();\n  }; // Этот метод создан для оптимизации, \n  // чтобы не помещать такую конструкцию в метод render\n\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        tabIndex: 0,\n        ref: elt => itemRefs.current[i] = elt,\n        onClick: () => {\n          props.onCharSelected(item.id);\n          focusOnItem(i);\n        },\n        onKeyPress: e => {\n          if (e.key === ' ' || e.key === \"Enter\") {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n    }); // А эта конструкция вынесена для центровки спиннера/ошибки\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n  const items = renderItems(charList);\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 34\n  }, this) : null;\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 31\n  }, this) : null;\n  const content = !(loading || error) ? items : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [errorMessage, spinner, content, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharList, \"tj/Dnpr467ph91O/Weo59QCHayg=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharList;\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"sources":["/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/CharList.js"],"names":["useState","useEffect","useRef","PropTypes","Spinner","ErrorMessage","useMarvelService","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","onRequest","then","onCharListLoaded","newCharList","ended","length","setLoading","onError","setState","setError","itemRefs","focusOnItem","id","current","forEach","elt","classList","remove","toggle","focus","renderItems","arr","items","map","item","i","imgStyle","thumbnail","onCharSelected","e","key","name","errorMessage","spinner","content","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/useMarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest()\n    }, [])\n\n    const onRequest = (offset) => {\n        setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setLoading(loading => false)\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n\n    }\n\n    const onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n\n        setError(true)\n        setLoading(loading => false)\n    }\n\n    const itemRefs = useRef([])\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(elt => elt.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.toggle('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={elt => itemRefs.current[i] = elt}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? items : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}