{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=1a5f0080e9249db8fc4741ff1f3581ec';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getComic\n  };\n};\n\n_s(useMarvelService, \"uUyY7lUIwkf2no8vbgFvZlrZhN4=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelService;","map":{"version":3,"sources":["/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/services/useMarvelService.js"],"names":["useHttp","useMarvelService","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","data","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","url","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"mappings":"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","sourcesContent":["import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n\n    const { loading, request, error, clearError } = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=1a5f0080e9249db8fc4741ff1f3581ec';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        };\n    }\n\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\n}\n\nexport default useMarvelService;"]},"metadata":{},"sourceType":"module"}