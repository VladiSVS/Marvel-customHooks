{"ast":null,"code":"var _jsxFileName = \"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter/src/components/charInfo/CharInfo.js\";\nimport './charInfo.scss';\nimport React from 'react';\nimport thor from '../../resources/img/thor.jpeg';\nimport MarvelService from '../../services/MarvelService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CharInfo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      char: {},\n      loading: false,\n      error: false\n    };\n    this.marvelService = new MarvelService();\n\n    this.updateChar = () => {\n      const {\n        charId\n      } = this.props;\n\n      if (!charId) {\n        return;\n      }\n\n      this.onCharLoading();\n      this.marvelService.getCharacter(charId).then(this.onCharLoaded).catch(this.onError);\n    };\n\n    this.onCharLoaded = char => {\n      this.setState({\n        char,\n        loading: false\n      });\n    };\n\n    this.onCharLoading = () => {\n      this.setState({\n        loading: true\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updateChar();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst View = ({\n  char\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = View;\nexport default CharInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["/Users/uladzimirsiauko/Happy/Udemy/marvel_starter/src/components/charInfo/CharInfo.js"],"names":["React","thor","MarvelService","CharInfo","Component","state","char","loading","error","marvelService","updateChar","charId","props","onCharLoading","getCharacter","then","onCharLoaded","catch","onError","setState","componentDidMount","render","View"],"mappings":";AAAA,OAAO,iBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAEnCC,KAFmC,GAE3B;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,OAAO,EAAE,KAFL;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAF2B;AAAA,SAQnCC,aARmC,GAQnB,IAAIP,aAAJ,EARmB;;AAAA,SAcnCQ,UAdmC,GActB,MAAM;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKC,KAAxB;;AACA,UAAI,CAACD,MAAL,EAAa;AACT;AACH;;AAED,WAAKE,aAAL;AAEA,WAAKJ,aAAL,CACKK,YADL,CACkBH,MADlB,EAEKI,IAFL,CAEU,KAAKC,YAFf,EAGKC,KAHL,CAGW,KAAKC,OAHhB;AAKH,KA3BkC;;AAAA,SA6BnCF,YA7BmC,GA6BnBV,IAAD,IAAU;AACrB,WAAKa,QAAL,CAAc;AACVb,QAAAA,IADU;AAEVC,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KAlCkC;;AAAA,SAoCnCM,aApCmC,GAoCnB,MAAM;AAClB,WAAKM,QAAL,CAAc;AACVZ,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KAxCkC;;AAAA,SA0CnCW,OA1CmC,GA0CzB,MAAM;AACZ,WAAKC,QAAL,CAAc;AACVZ,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAE;AAFG,OAAd;AAIH,KA/CkC;AAAA;;AAUnCY,EAAAA,iBAAiB,GAAG;AAChB,SAAKV,UAAL;AACH;;AAqCDW,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAvDkC;;AA0DvC,MAAMC,IAAI,GAAG,CAAC;AAAEhB,EAAAA;AAAF,CAAD,KAAc;AACvB,sBACI,qCADJ;AAIH,CALD;;KAAMgB,I;AAON,eAAenB,QAAf","sourcesContent":["import './charInfo.scss';\nimport React from 'react';\nimport thor from '../../resources/img/thor.jpeg';\nimport MarvelService from '../../services/MarvelService'\n\nclass CharInfo extends React.Component {\n\n    state = {\n        char: {},\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar()\n    }\n\n    updateChar = () => {\n        const { charId } = this.props\n        if (!charId) {\n            return\n        }\n\n        this.onCharLoading()\n\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"char__info\" >\n\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    return (\n        <>\n        </>\n    )\n}\n\nexport default CharInfo;"]},"metadata":{},"sourceType":"module"}