[{"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/index.js":"1","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/app/App.js":"2","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/appHeader/AppHeader.js":"3","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/errorBoundary/ErrorBoundary.js":"4","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/CharList.js":"5","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charInfo/CharInfo.js":"6","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/randomChar/RandomChar.js":"7","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/spinner/spinner.js":"8","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/errorMessage/ErrorMessage.js":"9","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/skeleton/Skeleton.js":"10","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/hooks/http.hook.js":"11","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/services/useMarvelService.js":"12","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/comicsList/ComicsList.js":"13","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/appBanner/AppBanner.js":"14","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/index.js":"15","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/MainPage.js":"16","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/ComicsPage.js":"17","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/404.js":"18","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/spinner/Spinner.js":"19","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/SingleComicPage.js":"20","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/someFunc.js":"21"},{"size":242,"mtime":1637938686827,"results":"22","hashOfConfig":"23"},{"size":1152,"mtime":1638105127913,"results":"24","hashOfConfig":"23"},{"size":689,"mtime":1638097520390,"results":"25","hashOfConfig":"23"},{"size":579,"mtime":1635510684131,"results":"26","hashOfConfig":"23"},{"size":4563,"mtime":1638104103364,"results":"27","hashOfConfig":"23"},{"size":2899,"mtime":1638099852460,"results":"28","hashOfConfig":"23"},{"size":2941,"mtime":1638099833444,"results":"29","hashOfConfig":"23"},{"size":4937,"mtime":1638099783736,"results":"30","hashOfConfig":"23"},{"size":251,"mtime":1635253408707,"results":"31","hashOfConfig":"23"},{"size":666,"mtime":1629627051000,"results":"32","hashOfConfig":"23"},{"size":903,"mtime":1637937685925,"results":"33","hashOfConfig":"23"},{"size":2244,"mtime":1638102741067,"results":"34","hashOfConfig":"23"},{"size":2481,"mtime":1638100542537,"results":"35","hashOfConfig":"23"},{"size":522,"mtime":1629627299000,"results":"36","hashOfConfig":"23"},{"size":208,"mtime":1638100786734,"results":"37","hashOfConfig":"23"},{"size":993,"mtime":1638097824295,"results":"38","hashOfConfig":"23"},{"size":251,"mtime":1638097940643,"results":"39","hashOfConfig":"23"},{"size":636,"mtime":1638099300000,"results":"40","hashOfConfig":"23"},{"size":4937,"mtime":1638099783736,"results":"41","hashOfConfig":"23"},{"size":1828,"mtime":1638102890448,"results":"42","hashOfConfig":"23"},{"size":118,"mtime":1638103991780,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1wg52hu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/index.js",[],["92","93"],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/app/App.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/appHeader/AppHeader.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/errorBoundary/ErrorBoundary.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/CharList.js",["94"],"import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/useMarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n\n    }\n\n    const itemRefs = useRef([])\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(elt => elt.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.toggle('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={elt => itemRefs.current[i] = elt}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charInfo/CharInfo.js",["95","96"],"import './charInfo.scss';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/useMarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error || !char) ? <View char={char} /> : null\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n\n    const { name, description, thumbnail, homepage, wiki, comics } = char\n\n    let imgStyle = { 'objectFit': 'cover' }\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' }\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'Not Found'}\n                {\n                    comics.map((elt, i) => {\n                        if (i > 9) {\n                            return\n                        }\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {elt.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/randomChar/RandomChar.js",["97"],"import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/useMarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000);\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error) ? <View char={char} /> : null\n\n    return (\n        <div className=\"randomchar\" >\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    let imgStyle = { 'objectFit': 'cover' }\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' }\n    }\n\n    return (\n\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default RandomChar;\n\n","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/spinner/spinner.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/errorMessage/ErrorMessage.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/skeleton/Skeleton.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/hooks/http.hook.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/services/useMarvelService.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/comicsList/ComicsList.js",["98"],"import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from '../../services/useMarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/appBanner/AppBanner.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/index.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/MainPage.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/ComicsPage.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/404.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/spinner/Spinner.js",[],"/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/pages/SingleComicPage.js",["99"],"import { useParams, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/useMarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n\n    const { loading, error, getComic, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateComic();\n    }, [comicId]);\n\n    const updateComic = () => {\n        \n        clearError();\n        getComic(comicId)\n            .then(onComicLoaded);\n\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {titel, description, pageCount, thumbnail, language, price} = comic;\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={titel} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{titel}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">{language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComicPage;","/Users/uladzimirsiauko/Happy/Udemy/marvel_starter_hooks/src/components/charList/someFunc.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":19,"column":8,"nodeType":"106","endLine":19,"endColumn":10,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":15,"column":8,"nodeType":"106","endLine":15,"endColumn":22,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":81,"column":29,"nodeType":"112","messageId":"113","endLine":81,"endColumn":35},{"ruleId":"104","severity":1,"message":"108","line":20,"column":8,"nodeType":"106","endLine":20,"endColumn":10,"suggestions":"114"},{"ruleId":"104","severity":1,"message":"105","line":20,"column":8,"nodeType":"106","endLine":20,"endColumn":10,"suggestions":"115"},{"ruleId":"104","severity":1,"message":"116","line":17,"column":8,"nodeType":"106","endLine":17,"endColumn":17,"suggestions":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'offset' and 'onRequest'. Either include them or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'updateChar'. Either include it or remove the dependency array.",["121"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["122"],["123"],"React Hook useEffect has a missing dependency: 'updateComic'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"125","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [offset, onRequest]",{"range":"134","text":"135"},"Update the dependencies array to be: [props.charId, updateChar]",{"range":"136","text":"137"},"Update the dependencies array to be: [updateChar]",{"range":"138","text":"139"},{"range":"140","text":"135"},"Update the dependencies array to be: [comicId, updateComic]",{"range":"141","text":"142"},[655,657],"[offset, onRequest]",[484,498],"[props.charId, updateChar]",[616,618],"[updateChar]",[653,655],[535,544],"[comicId, updateComic]"]